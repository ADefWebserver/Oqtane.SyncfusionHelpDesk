@using Oqtane.Modules.Controls
@using Syncfusion.Helpdesk.Services
@using Syncfusion.Helpdesk.Models
@using Syncfusion.Helpdesk.Client.Modules.Syncfusion_Helpdesk

@namespace Syncfusion.Helpdesk
@inherits ModuleBase
@inject IHelpdeskAdminService HelpdeskAdminService
@inject NavigationManager NavigationManager

<div id="admintarget" style="height: 500px;" class="col-lg-12 control-section">
    <SfGrid ID="Grid"
            @ref="gridObj"
            DataSource="@colHelpDeskTickets"
            AllowPaging="true"
            AllowSorting="true"
            AllowResizing="true"
            AllowReordering="true">
        <SfDataManager Url="@SfDataManagerURL"
                       Adaptor="Adaptors.WebApiAdaptor">
        </SfDataManager>
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridEvents CommandClicked="OnCommandClicked"
                    TValue="SyncfusionHelpDeskTickets">
        </GridEvents>
        <GridColumns>
            <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="100">
                <GridCommandColumns>
                    <GridCommandColumn Type=CommandButtonType.Edit
                                       ButtonOption="@(new CommandButtonOptions()
                                                       { Content = "Edit" })">
                    </GridCommandColumn>
                    <GridCommandColumn Type=CommandButtonType.Delete
                                       ButtonOption="@(new CommandButtonOptions()
                                                       { Content = "Delete" })">
                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridColumn IsPrimaryKey="true"
                        Field=@nameof(SyncfusionHelpDeskTickets.HelpDeskTicketId)
                        HeaderText="ID #" TextAlign="@TextAlign.Left"
                        Width="70">
            </GridColumn>
            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketStatus)
                        HeaderText="Status" TextAlign="@TextAlign.Left"
                        Width="80">
            </GridColumn>
            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketDate)
                        HeaderText="Date" TextAlign="@TextAlign.Left"
                        Format="d" Type="ColumnType.Date"
                        Width="80">
            </GridColumn>
            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketDescription)
                        HeaderText="Description" TextAlign="@TextAlign.Left"
                        Width="150">
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<SfDialog Target="#admintarget"
          Width="500px"
          Height="500px"
          IsModal="true"
          ShowCloseIcon="true"
          @bind-Visible="EditDialogVisibility">
    <DialogTemplates>
        <Header> EDIT TICKET # @SelectedTicket.HelpDeskTicketId</Header>
        <Content>
            <EditTicket SelectedTicket="@SelectedTicket" isAdmin="true" />
        </Content>
        <FooterTemplate>
            <div class="button-container">
                <button type="submit"
                        class="e-btn e-normal e-primary"
                        @onclick="SaveTicket">
                    Save
                </button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<SfDialog Target="#admintarget"
          Width="100px"
          Height="130px"
          IsModal="true"
          ShowCloseIcon="false"
          @bind-Visible="DeleteRecordConfirmVisibility">
    <DialogTemplates>
        <Header> DELETE RECORD ? </Header>
        <Content>
            <div class="button-container">
                <button type="submit"
                        class="e-btn e-normal e-primary"
                        @onclick="ConfirmDeleteYes">
                    Yes
                </button>
                <button type="submit"
                        class="e-btn e-normal"
                        @onclick="ConfirmDeleteNo">
                    No
                </button>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    // This ensures only users with this security level Edit
    // can open this control
    public override SecurityAccessLevel
    SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage HelpDesk";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource {
            ResourceType = ResourceType.Stylesheet,
            Url = ModulePath() + "Module.css" },

        // Only register .css files
        // The JavaScript files will automatically be pulled
        // from the _content/syncfusion.blazor directory
        // so they do not need to be registered here
        new Resource { ResourceType = ResourceType.Stylesheet,
            Url = "_content/Syncfusion.Blazor/" +
            "styles/bootstrap4.css" },

        new Resource { ResourceType = ResourceType.Stylesheet,
            Url = "_content/Syncfusion.Blazor/" +
            "styles/material-dark.css" },

        new Resource { ResourceType = ResourceType.Script,
            Url = "https://kit.fontawesome.com/a076d05399.js" }
    };

    // Global property for the selected Help Desk Ticket
    private SyncfusionHelpDeskTickets SelectedTicket =
        new SyncfusionHelpDeskTickets();

    SfGrid<SyncfusionHelpDeskTickets> gridObj;

    public List<SyncfusionHelpDeskTickets>
        colHelpDeskTickets
    { get; set; }

    string SfDataManagerURL = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SfDataManagerURL =
                $"{ModuleState.SiteId}/api/HelpdeskAdmin?" +
                $"entityid={ModuleState.ModuleId}";
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading HelpDesk {Error}",
                ex.Message);

            AddModuleMessage("Error Loading HelpDesk", MessageType.Error);
        }
    }

    public async void OnCommandClicked(
        CommandClickEventArgs<SyncfusionHelpDeskTickets> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Edit")
        {
            // Get the selected Help Desk Ticket
            var HelpDeskTicket = (SyncfusionHelpDeskTickets)args.RowData;

            SelectedTicket =
                await HelpdeskAdminService.GetSyncfusionHelpDeskTicketAdminAsync
                (HelpDeskTicket.HelpDeskTicketId, ModuleState.ModuleId);

            // Open the Edit dialog
            this.EditDialogVisibility = true;
            StateHasChanged();
        }

        if (args.CommandColumn.ButtonOption.Content == "Delete")
        {
            SelectedTicket = new SyncfusionHelpDeskTickets();
            SelectedTicket.HelpDeskTicketId = args.RowData.HelpDeskTicketId;

            // Open Delete confirmation dialog
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }

    }

    public async Task SaveTicket()
    {
        // Update the selected Help Desk Ticket
        await HelpdeskAdminService.
            UpdateSyncfusionHelpDeskTicketsAdminAsync(SelectedTicket);

        // Close the Edit dialog
        this.EditDialogVisibility = false;

        // Refresh the SfGrid
        // so the changes to the selected
        // Help Desk Ticket are reflected
        gridObj.Refresh();
    }

    public bool EditDialogVisibility { get; set; } = false;

    // Property to control the delete dialog
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    public void ConfirmDeleteNo()
    {
        this.DeleteRecordConfirmVisibility = false;
    }

    public async void ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // selected Help Desk Ticket
        // Delete the record
        await HelpdeskAdminService.
            DeleteSyncfusionHelpDeskTicketsAsync(
            SelectedTicket.HelpDeskTicketId,
            ModuleState.ModuleId);

        // Close the dialog
        this.DeleteRecordConfirmVisibility = false;
        StateHasChanged();

        // Refresh the SfGrid
        // so the deleted record will not show
        gridObj.Refresh();
    }
}