@using Syncfusion.HelpDesk.Services
@using Syncfusion.HelpDesk.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids

@namespace Syncfusion.HelpDesk
@inherits ModuleBase
@inject IHelpDeskService HelpDeskService
@inject NavigationManager NavigationManager

<SfToast ID="toast_default" Height="50"
         @ref="ToastObj"
         Title="Help Desk Ticket"
         Content="@ToastContent">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>
<h3>New Help Desk Ticket</h3>
<br />
<EditForm ID="new-doctor-form" Model="@objHelpDeskTicket"
          OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <SfDropDownList TItem="SyncfusionHelpDeskStatus" TValue="string"
                        PopupHeight="230px" Index=0
                        Placeholder="Ticket Status"
                        DataSource="@SyncfusionHelpDeskStatus.Statuses"
                        FloatLabelType="@FloatLabelType.Always"
                        @bind-Value="@objHelpDeskTicket.TicketStatus">
            <DropDownListFieldSettings Text="Text"
                                       Value="ID">
            </DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div>
        <SfDatePicker ID="TicketDate" Placeholder="Ticket Date"
                      FloatLabelType="@FloatLabelType.Always"
                      @bind-Value="@objHelpDeskTicket.TicketDate"
                      Max="DateTime.Now"
                      ShowClearButton="false"></SfDatePicker>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
    </div>
    <div>
        <SfTextBox Placeholder="Ticket Description"
                   FloatLabelType="@FloatLabelType.Always"
                   @bind-Value="@objHelpDeskTicket.TicketDescription">

        </SfTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
    </div>
    <br /><br />
    <SfButton Content="@Content" HtmlAttributes="@submit"></SfButton>
</EditForm>


@code {
    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    public string Content = "Submit";
    private Dictionary<string, object> submit = new Dictionary<string, object>() {
        { "type", "submit"}
    };

    // Global property for the Help Desk Ticket
    SyncfusionHelpDeskTickets objHelpDeskTicket;

    SfToast ToastObj;
    private string ToastContent { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //_HelpDesks = await HelpDeskService.GetSyncfusionHelpDeskTicketsAsync(ModuleState.ModuleId);
            ResetForm();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading HelpDesk {Error}", ex.Message);
            AddModuleMessage("Error Loading HelpDesk", MessageType.Error);
        }
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            // Save the new Help Desk Ticket

            //await NoAuthenticationClient.PostAsJsonAsync(
            //    "SyncfusionHelpDesk", objHelpDeskTicket);

            // Clear the form
            ResetForm();

            // Show the Toast
            ToastContent = "Saved!";
            StateHasChanged();
            await this.ToastObj.Show();

        }
        catch (Exception ex)
        {
            ToastContent = ex.Message;
            StateHasChanged();
            await this.ToastObj.Show();
        }
    }

    public void ResetForm()
    {
        objHelpDeskTicket = new SyncfusionHelpDeskTickets()
        {
            TicketDate = new DateTime(
                DateTime.Now.Year,
                DateTime.Now.Month,
                DateTime.Now.Day)
        };
    }
}