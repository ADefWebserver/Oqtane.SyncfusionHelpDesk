@using Syncfusion.HelpDesk.Services
@using Syncfusion.HelpDesk.Models
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Authorization

@namespace Syncfusion.HelpDesk
@inherits ModuleBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHelpDeskService HelpDeskService
@inject NavigationManager NavigationManager

<h3>New Help Desk Ticket</h3>
<ActionLink Action="Edit" Security="SecurityAccessLevel.Edit" Text="Existing Tickets" />
<br />
<br />
<EditForm ID="new-doctor-form" Model="@objHelpDeskTicket"
          OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <SfDropDownList TItem="SyncfusionHelpDeskStatus" TValue="string"
                        PopupHeight="230px" Index=0
                        Placeholder="Ticket Status"
                        DataSource="@SyncfusionHelpDeskStatus.Statuses"
                        FloatLabelType="@FloatLabelType.Always"
                        @bind-Value="@objHelpDeskTicket.TicketStatus">
            <DropDownListFieldSettings Text="Text"
                                       Value="ID">
            </DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div>
        <SfDatePicker ID="TicketDate" Placeholder="Ticket Date"
                      FloatLabelType="@FloatLabelType.Always"
                      @bind-Value="@objHelpDeskTicket.TicketDate"
                      Max="DateTime.Now"
                      ShowClearButton="false"></SfDatePicker>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
    </div>
    <div>
        <SfTextBox Placeholder="Ticket Description"
                   FloatLabelType="@FloatLabelType.Always"
                   @bind-Value="@objHelpDeskTicket.TicketDescription">

        </SfTextBox>
        <ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
    </div>
    <br /><br />
    @if (isAuthenticated)
    {
        <SfButton Content="@Content" HtmlAttributes="@submit"></SfButton>
        <br /><br /> <b>@Status</b>
    }
    else
    {
        <b>You must be logged in to submit a Ticket</b>
    }
</EditForm>

@code {
    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    public string Content = "Submit";
    private Dictionary<string, object> submit = new Dictionary<string, object>() {
        { "type", "submit"}
    };

    // Global property for the Help Desk Ticket
    SyncfusionHelpDeskTickets objHelpDeskTicket = new SyncfusionHelpDeskTickets()
    {
        TicketDate = new DateTime(
                DateTime.Now.Year,
                DateTime.Now.Month,
                DateTime.Now.Day)
    };

    AuthenticationState authState;
    bool isAuthenticated = false;
    string Status = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // get user
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading HelpDesk {Error}", ex.Message);
            AddModuleMessage("Error Loading HelpDesk", MessageType.Error);
        }
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            Status = "";

            // Save the new Help Desk Ticket

            SyncfusionHelpDeskTickets HelpDesk = new SyncfusionHelpDeskTickets();

            HelpDesk.ModuleId = ModuleState.ModuleId;
            HelpDesk.TicketStatus = objHelpDeskTicket.TicketStatus;
            HelpDesk.TicketDate = Convert.ToDateTime(objHelpDeskTicket.TicketDate);
            HelpDesk.TicketDescription = objHelpDeskTicket.TicketDescription;
            HelpDesk.CreatedBy = authState.User.Identity.Name;
            HelpDesk.CreatedOn = DateTime.Now;
            HelpDesk.ModifiedBy = authState.User.Identity.Name;
            HelpDesk.ModifiedOn = DateTime.Now;
            HelpDesk.SyncfusionHelpDeskTicketDetails = new List<SyncfusionHelpDeskTicketDetails>();

            HelpDesk = await HelpDeskService.AddSyncfusionHelpDeskTicketsAsync(HelpDesk);
            await logger.LogInformation("HelpDesk Added {HelpDesk}", HelpDesk);

            Status = "Saved!";

            // Clear the form
            ResetForm();
        }
        catch (Exception ex)
        {
            Status = ex.Message;
        }
    }

    public void ResetForm()
    {
        objHelpDeskTicket = new SyncfusionHelpDeskTickets()
        {
            TicketDate = new DateTime(
                DateTime.Now.Year,
                DateTime.Now.Month,
                DateTime.Now.Day)
        };
    }
}