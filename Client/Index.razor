@using Syncfusion.HelpDesk.Services
@using Syncfusion.HelpDesk.Models
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.HelpDesk.Client

@namespace Syncfusion.HelpDesk
@inherits ModuleBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHelpDeskService HelpDeskService
@inject NavigationManager NavigationManager

<ActionLink Action="Edit" Security="SecurityAccessLevel.Edit" Text="Administration" />
<br />
<br />
@if (isAuthenticated)
{
    <div class="col-lg-12 control-section">
        <div class="e-sample-resize-container">
            <SfTab CssClass="default-tab">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="New Help Desk Ticket" IconCss="far fa-edit"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <br /><br />
                            <EditForm ID="new-doctor-form" Model="@objHelpDeskTicket"
                                      OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <div>
                                    <SfComboBox TValue="string" TItem="SyncfusionHelpDeskStatus"
                                                PopupHeight="230px" Placeholder="Ticket Status"
                                                FloatLabelType="@FloatLabelType.Always"
                                                @bind-Value="@objHelpDeskTicket.TicketStatus" DataSource="@SyncfusionHelpDeskStatus.Statuses">
                                        <ComboBoxEvents TValue="string" TItem="SyncfusionHelpDeskStatus"></ComboBoxEvents>
                                        <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
                                    </SfComboBox>
                                </div>
                                <div>
                                    <SfDatePicker ID="TicketDateInput" Placeholder="Ticket Date"
                                                  FloatLabelType="@FloatLabelType.Always"
                                                  @bind-Value="@objHelpDeskTicket.TicketDate"
                                                  Max="DateTime.Now"
                                                  ShowClearButton="false"></SfDatePicker>
                                    <ValidationMessage For="@(() => objHelpDeskTicket.TicketDate)" />
                                </div>
                                <div>
                                    <SfTextBox Placeholder="Ticket Description"
                                               FloatLabelType="@FloatLabelType.Always"
                                               @bind-Value="@objHelpDeskTicket.TicketDescription">

                                    </SfTextBox>
                                    <ValidationMessage For="@(() => objHelpDeskTicket.TicketDescription)" />
                                </div>
                                <br />

                                <SfButton Content="@Content" HtmlAttributes="@submit"></SfButton>
                                <br /><br /> <b>@Status</b>

                            </EditForm>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Existing Tickets" IconCss="fa fa-inbox"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <br /><br />
                            <div>
                                <div id="target" style="height: 500px;">
                                    <SfGrid ID="Grid"
                                            @ref="gridObj"
                                            DataSource="@colHelpDeskTickets"
                                            AllowPaging="true"
                                            AllowSorting="true"
                                            AllowResizing="true"
                                            AllowReordering="true">
                                        <GridPageSettings PageSize="5"></GridPageSettings>
                                        <GridEvents CommandClicked="OnCommandClicked"
                                                    TValue="SyncfusionHelpDeskTickets">
                                        </GridEvents>
                                        <GridColumns>
                                            <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="150">
                                                <GridCommandColumns>
                                                    <GridCommandColumn Type=CommandButtonType.Edit
                                                                       ButtonOption="@(new CommandButtonOptions()
                                                { Content = "Edit" })">
                                                    </GridCommandColumn>
                                                    <GridCommandColumn Type=CommandButtonType.Delete
                                                                       ButtonOption="@(new CommandButtonOptions()
                                                { Content = "Delete" })">
                                                    </GridCommandColumn>
                                                </GridCommandColumns>
                                            </GridColumn>
                                            <GridColumn IsPrimaryKey="true" Field=@nameof(SyncfusionHelpDeskTickets.HelpDeskTicketId)
                                                        HeaderText="ID #" TextAlign="@TextAlign.Left"
                                                        Width="70">
                                            </GridColumn>
                                            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketStatus)
                                                        HeaderText="Status" TextAlign="@TextAlign.Left"
                                                        Width="80">
                                            </GridColumn>
                                            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketDate)
                                                        HeaderText="Date" TextAlign="@TextAlign.Left"
                                                        Width="80">
                                            </GridColumn>
                                            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketDescription)
                                                        HeaderText="Description" TextAlign="@TextAlign.Left"
                                                        Width="150">
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </div>
    </div>

    <SfDialog Target="#target"
              Width="500px"
              Height="500px"
              IsModal="true"
              ShowCloseIcon="true"
              @bind-Visible="EditDialogVisibility">
        <DialogTemplates>
            <Header> EDIT TICKET # @SelectedTicket.HelpDeskTicketId</Header>
            <Content>
                <EditTicket SelectedTicket="@SelectedTicket" />
            </Content>
            <FooterTemplate>
                <div class="button-container">
                    <button type="submit"
                            class="e-btn e-normal e-primary"
                            @onclick="SaveTicket">
                        Save
                    </button>
                </div>
            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
}
else
{
    <b>You must be logged in to submit a Ticket</b>
}
@code {
    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    public string Content = "Submit";
    private Dictionary<string, object> submit = new Dictionary<string, object>() {
        { "type", "submit"}
    };

    // Global property for the Help Desk Ticket
    SyncfusionHelpDeskTickets objHelpDeskTicket = new SyncfusionHelpDeskTickets()
    {
        TicketDate = new DateTime(
                    DateTime.Now.Year,
                    DateTime.Now.Month,
                    DateTime.Now.Day),
        TicketStatus = "New"
    };

    // Global property for the selected Help Desk Ticket
    private SyncfusionHelpDeskTickets SelectedTicket = new SyncfusionHelpDeskTickets();

    SfGrid<SyncfusionHelpDeskTickets> gridObj;

    public List<SyncfusionHelpDeskTickets> colHelpDeskTickets { get; set; }

    AuthenticationState authState;
    bool isAuthenticated = false;
    string Status = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // get user
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity.IsAuthenticated)
            {
                isAuthenticated = true;

                colHelpDeskTickets = 
                    await HelpDeskService.GetSyncfusionHelpDeskTicketsByUserAsync(
                        ModuleState.ModuleId, authState.User.Identity.Name);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading HelpDesk {Error}", ex.Message);
            AddModuleMessage("Error Loading HelpDesk", MessageType.Error);
        }
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            Status = "";

            // Save the new Help Desk Ticket

            SyncfusionHelpDeskTickets HelpDesk = new SyncfusionHelpDeskTickets();

            HelpDesk.ModuleId = ModuleState.ModuleId;
            HelpDesk.TicketStatus = objHelpDeskTicket.TicketStatus;
            HelpDesk.TicketDate = Convert.ToDateTime(objHelpDeskTicket.TicketDate);
            HelpDesk.TicketDescription = objHelpDeskTicket.TicketDescription;
            HelpDesk.CreatedBy = authState.User.Identity.Name;
            HelpDesk.CreatedOn = DateTime.Now;
            HelpDesk.ModifiedBy = authState.User.Identity.Name;
            HelpDesk.ModifiedOn = DateTime.Now;
            HelpDesk.SyncfusionHelpDeskTicketDetails = new List<SyncfusionHelpDeskTicketDetails>();

            HelpDesk = await HelpDeskService.AddSyncfusionHelpDeskTicketsAsync(HelpDesk);
            await logger.LogInformation("HelpDesk Added {HelpDesk}", HelpDesk);

            Status = "Saved!";

            // Clear the form
            ResetForm();
        }
        catch (Exception ex)
        {
            Status = ex.Message;
        }
    }

    public void ResetForm()
    {
        objHelpDeskTicket = new SyncfusionHelpDeskTickets()
        {
            TicketDate = new DateTime(
                DateTime.Now.Year,
                DateTime.Now.Month,
                DateTime.Now.Day),
            TicketStatus = "New"
        };
    }

    // EXISTING HELP DESK TICKETS

    public bool EditDialogVisibility { get; set; } = false;

    public async void OnCommandClicked(
      CommandClickEventArgs<SyncfusionHelpDeskTickets> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Edit")
        {
            //// Get the selected Help Desk Ticket
            //SelectedTicket =
            //    await Http.GetFromJsonAsync<HelpDeskTicket>(
            //        "Email?HelpDeskTicketGuid=" +
            //        args.RowData.TicketGuid);

            // Open the Edit dialog
            this.EditDialogVisibility = true;
            StateHasChanged();
        }
    }

    public async Task SaveTicket()
    {
        // Update the selected Help Desk Ticket
        //await Http.PutAsJsonAsync(
        //"SyncfusionHelpDesk", SelectedTicket);

        // Close the Edit dialog
        this.EditDialogVisibility = false;

        // Refresh the SfGrid
        // so the changes to the selected
        // Help Desk Ticket are reflected
        gridObj.Refresh();
    }
}