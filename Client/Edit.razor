@using Oqtane.Modules.Controls
@using Syncfusion.HelpDesk.Services
@using Syncfusion.HelpDesk.Models

@namespace Syncfusion.HelpDesk
@inherits ModuleBase
@inject IHelpDeskService HelpDeskService
@inject NavigationManager NavigationManager

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="name" HelpText="Enter a Ticket Status">Ticket Status: </Label>
        </td>
        <td>
            <input id="TicketStatus" class="form-control" @bind="@_TicketStatus" />
        </td>
    </tr>
    <tr>
        <td>
            <Label For="TicketDate" HelpText="Enter a Ticket Date">Ticket Date: </Label>
        </td>
        <td>
            <input id="TicketDate" class="form-control" @bind="@_TicketDate" />
        </td>
    </tr>
    <tr>
        <td>
            <Label For="TicketDescription" HelpText="Enter a Ticket Description">Ticket Description: </Label>
        </td>
        <td>
            <input id="TicketDescription" class="form-control" @bind="@_TicketDescription" />
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage HelpDesk";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    int _id;
    string _TicketStatus;
    string _TicketDate;
    string _TicketDescription;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                //_id = Int32.Parse(PageState.QueryString["id"]);
                //SyncfusionHelpDeskTickets HelpDesk = await HelpDeskService.GetSyncfusionHelpDeskTicketsAsync(_id, ModuleState.ModuleId);
                //if (HelpDesk != null)
                //{
                //    _TicketStatus = HelpDesk.TicketStatus;
                //    _TicketDate = HelpDesk.TicketDate.ToShortDateString();
                //    _TicketDescription = HelpDesk.TicketDescription;
                //    _createdby = HelpDesk.CreatedBy;
                //    _createdon = HelpDesk.CreatedOn;
                //    _modifiedby = HelpDesk.ModifiedBy;
                //    _modifiedon = HelpDesk.ModifiedOn;
                //}
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading HelpDesk {HelpDeskId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading HelpDesk", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {

            //SyncfusionHelpDeskTickets HelpDesk = new SyncfusionHelpDeskTickets();
            //HelpDesk.ModuleId = ModuleState.ModuleId;
            //HelpDesk.TicketStatus = _TicketStatus;
            //HelpDesk.TicketDate = Convert.ToDateTime(_TicketDate);
            //HelpDesk.TicketDescription = _TicketDescription;
            //HelpDesk = await HelpDeskService.AddSyncfusionHelpDeskTicketsAsync(HelpDesk);
            //await logger.LogInformation("HelpDesk Added {HelpDesk}", HelpDesk);

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving HelpDesk {Error}", ex.Message);
            AddModuleMessage("Error Saving HelpDesk", MessageType.Error);
        }
    }
}
