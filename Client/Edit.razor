@using Oqtane.Modules.Controls
@using Syncfusion.HelpDesk.Services
@using Syncfusion.HelpDesk.Models
@using Syncfusion.HelpDesk.Client

@namespace Syncfusion.HelpDesk
@inherits ModuleBase
@inject IHelpDeskAdminService HelpDeskAdminService
@inject NavigationManager NavigationManager

<div id="admintarget" style="height: 500px;" class="col-lg-12 control-section">
    <SfGrid ID="Grid"
            @ref="gridObj"
            DataSource="@colHelpDeskTickets"
            AllowPaging="true"
            AllowSorting="true"
            AllowResizing="true"
            AllowReordering="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridEvents CommandClicked="OnCommandClicked"
                    TValue="SyncfusionHelpDeskTickets">
        </GridEvents>
        <GridColumns>
            <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="50">
                <GridCommandColumns>
                    <GridCommandColumn Type=CommandButtonType.Edit
                                       ButtonOption="@(new CommandButtonOptions() { Content = "Edit" })">
                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridColumn IsPrimaryKey="true" Field=@nameof(SyncfusionHelpDeskTickets.HelpDeskTicketId)
                        HeaderText="ID #" TextAlign="@TextAlign.Left"
                        Width="70">
            </GridColumn>
            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketStatus)
                        HeaderText="Status" TextAlign="@TextAlign.Left"
                        Width="80">
            </GridColumn>
            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketDate)
                        HeaderText="Date" TextAlign="@TextAlign.Left"
                        Format="d" Type="ColumnType.Date"
                        Width="80">
            </GridColumn>
            <GridColumn Field=@nameof(SyncfusionHelpDeskTickets.TicketDescription)
                        HeaderText="Description" TextAlign="@TextAlign.Left"
                        Width="150">
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<SfDialog Target="#admintarget"
          Width="500px"
          Height="500px"
          IsModal="true"
          ShowCloseIcon="true"
          @bind-Visible="EditDialogVisibility">
    <DialogTemplates>
        <Header> EDIT TICKET # @SelectedTicket.HelpDeskTicketId</Header>
        <Content>
            <EditTicket SelectedTicket="@SelectedTicket" isAdmin="true" />
        </Content>
        <FooterTemplate>
            <div class="button-container">
                <button type="submit"
                        class="e-btn e-normal e-primary"
                        @onclick="SaveTicket">
                    Save
                </button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage HelpDesk";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    // Global property for the selected Help Desk Ticket
    private SyncfusionHelpDeskTickets SelectedTicket = new SyncfusionHelpDeskTickets();

    SfGrid<SyncfusionHelpDeskTickets> gridObj;

    public List<SyncfusionHelpDeskTickets> colHelpDeskTickets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshTickets();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading HelpDesk {Error}", ex.Message);
            AddModuleMessage("Error Loading HelpDesk", MessageType.Error);
        }
    }

    public async Task RefreshTickets()
    {
        var Tickets =
            await HelpDeskAdminService.GetSyncfusionHelpDeskTicketsAdminAsync(ModuleState.ModuleId);

        colHelpDeskTickets = Tickets.OrderByDescending(x => x.HelpDeskTicketId).ToList();
    }

    public bool EditDialogVisibility { get; set; } = false;

    public async void OnCommandClicked(
      CommandClickEventArgs<SyncfusionHelpDeskTickets> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "Edit")
        {
            // Get the selected Help Desk Ticket
            var HelpDeskTicket = (SyncfusionHelpDeskTickets)args.RowData;
            SelectedTicket = await HelpDeskAdminService.GetSyncfusionHelpDeskTicketAdminAsync(HelpDeskTicket.HelpDeskTicketId, ModuleState.ModuleId);

            // Open the Edit dialog
            this.EditDialogVisibility = true;
            StateHasChanged();
        }
    }

    public async Task SaveTicket()
    {
        // Update the selected Help Desk Ticket
        await HelpDeskAdminService.UpdateSyncfusionHelpDeskTicketsAdminAsync(SelectedTicket);

        // Update the TicketStatus and TicketDescription of the Ticket in the collection
        var TicketToUpdate = colHelpDeskTickets.Where(x => x.HelpDeskTicketId == SelectedTicket.HelpDeskTicketId).FirstOrDefault();
        TicketToUpdate.TicketStatus = SelectedTicket.TicketStatus;
        TicketToUpdate.TicketDescription = SelectedTicket.TicketDescription;

        // Close the Edit dialog
        this.EditDialogVisibility = false;

        // Refresh the SfGrid
        // so the changes to the selected
        // Help Desk Ticket are reflected
        gridObj.Refresh();
    }
}
